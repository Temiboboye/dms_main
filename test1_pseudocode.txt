Main Program:
    Print "Please enter the name of your organization:"
    Read organization
    Print "Welcome to " + organization + "'s DMS"
    Print "Below is your current location."
    Call GetLocationByIP
    
    Print "This is the scenario for flooding in Emergency rooms. Please enter the values below:"
    Print "Please enter the number of people affected:"
    Read num_people_affected_er
    people_affected_scale_er = Call FindNextCorrespondingValue with parameters ('nopa.xlsx', 0, num_people_affected_er)
    
    Print "Please enter the size of the damage area affected (without unit):"
    Read damaged_area_er
    damaged_area_scale_er = Call FindNextCorrespondingValue with parameters ('damaged_area_scale.xlsx', 0, damaged_area_er)
    
    Print "This is the scenario for trees fell on the road. Please enter the values below:"
    Print "Please enter the number of people affected:"
    Read num_people_affected_trees
    people_affected_scale_trees = Call FindNextCorrespondingValue with parameters ('nopa.xlsx', 0, num_people_affected_trees)
    
    Print "Please enter the number of trees affected:"
    Read damaged_area_trees
    damaged_area_scale_trees = Call FindNextCorrespondingValue with parameters ('damaged_area_scale.xlsx', 0, damaged_area_trees)
    
    num_people_affected_soi = Call FindNextCorrespondingValue with parameters ('damaged_area_scale.xlsx', 0, 1)
    damaged_area_soi = Call FindNextCorrespondingValue with parameters ('damaged_area_scale.xlsx', 0, 2)
    
    matrix1 = Call CreateMatrixFromValues with parameter get_params_er(damaged_area_soi, num_people_affected_soi)
    matrix2 = Call CreateMatrixFromValues with parameter get_params_er(people_affected_scale_er, people_affected_scale_trees)
    matrix3 = Call CreateMatrixFromValues with parameter get_params_er(damaged_area_scale_er, damaged_area_scale_trees)
    
    squared_part1 = Call SquareMatrix with parameter matrix1
    squared_part2 = Call SquareMatrix with parameter matrix2
    squared_part3 = Call SquareMatrix with parameter matrix3
    
    Call Normalize with parameter squared_part1
    Call Normalize with parameter squared_part2
    Call Normalize with parameter squared_part3
    
    result = Call CalculatePriority with parameter norm_matrix
    Call DrawTableAHP() with parameter result

Function FindNextCorrespondingValue(file_path, lookup_column, input_value):
    Load DataFrame df from file_path
    Validate lookup_column type
    Sort df by lookup_column
    Identify the correct row based on input_value
    If suitable row is identified:
        Return the corresponding value from the next row
    Else:
        Return None

Function CreateMatrixFromValues(values):
    Convert values to a numpy array
    Return the numpy array

Function SquareMatrix(matrix):
    Return the matrix squared

Function Normalize(matrix):
    Normalize the matrix based on total sum of elements
    Return the normalized matrix

Function CalculatePriority(norm_matrix):
    Calculate priorities based on normalized matrices
    Return calculated priorities

Function DrawTableAHP(priority):
    Calculate additional parameters based on priorities
    Draw and format a table based on these parameters
    Save the table to an Excel file

Function GetLocationByIP():
    Fetch data from IP info service
    Extract and print the location details
    Return the formatted address
